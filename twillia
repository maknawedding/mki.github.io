<?php

namespace App\Http\Controllers\Api;

use App\Http\Controllers\Controller;
use App\Models\Transaction;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Response;
use PHPUnit\Event\Runtime\PHP;
use Twilio\Rest\Client;

class MidtransController extends Controller
{
    public function callback(Request $request)
    {
        $serverKey = config('midtrans.serverKey');
        $hashedKey = hash('sha512', $request->order_id . $request->status_code . $request->gross_amount . $serverKey);

        if ($hashedKey !== $request->signature_key) {
            return response()->json(['message' => 'Invalid signature key'], 403);
        }

        $transactionStatus = $request->transaction_status;
        $orderId = $request->order_id;
        $transaction = Transaction::where('code', $orderId)->first();

        if (!$transaction) {
            return response()->json(['message' => 'Transaction not found'], 404);
        }

        $sid    = "ACe93fbda55c9ce62678e2562599fd8c99";
        $token  = "473021598be3fd725affe3f7ebba9990";
        $twilio = new Client($sid, $token);
        
        $message = 
        "Halo, " . $transaction->name . "!" . PHP_EOL . PHP_EOL .
        "Kami telah menerima pembayaran dengan kode booking : " . $transaction->code . "." . PHP_EOL .
        "Total Pembayaran : Rp " . number_format($transaction->total_amount, 0, ',', ',') . PHP_EOL . PHP_EOL .
        "Anda bisa datang ke kos : " . $transaction->boarding_house->name . PHP_EOL .
        "Alamat : " . $transaction->boarding_house->address . PHP_EOL .
        "Mulai tangga : " . $transaction->start_date->format('d M Y') . PHP_EOL . PHP_EOL .
        "Terima kasih atas kepercayaan anda untuk menggunakan layanan kami." . PHP_EOL .
        "Kami tunggu kedatangan anda kembali.";

        switch ($transactionStatus) {
            case 'capture':
                if ($request->payment_type == 'credit_card') {
                    if ($request->fraud_status == 'challenge') {
                        $transaction->update(['payment_status' => 'pending']);
                    } else {
                        $transaction->update(['payment_status' => 'success']);
                }
            }
                break;
            case 'settlement':
                $transaction->update(['payment_status' => 'success']);
                break;
            case 'pending':
                $transaction->update(['payment_status' => 'pending']);
                break;
            case 'deny':
                $transaction->update(['payment_status' => 'failed']);
                break;
            case 'expire':
                $transaction->update(['payment_status' => 'expired']);
                break;
            case 'cancel':
                $transaction->update(['payment_status' => 'canceled']);
                break;
            default:
                $transaction->update(['payment_status' => 'unknown']);
                break;
        }
        return response()->json(['message' => 'Callback received succesfully']);
    }
}
            